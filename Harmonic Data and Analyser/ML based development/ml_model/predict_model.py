import numpy as np
import pickle

# Load the trained model
with open("harmonic_model.pkl", "rb") as f:
    model, label_encoder = pickle.load(f)

# Input waveform sample (1000 values from 1s at 1kHz)
# Example usage: paste your data into this string
input_data = "-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025,-13.573,112.140,193.563,273.330,336.842,319.258,341.381,254.100,225.602,81.025,13.573,-112.140,-193.563,-273.330,-336.842,-319.258,-341.381,-254.100,-225.602,-81.025"

def classify_waveform(input_str):
    try:
        values = np.array([float(x.strip()) for x in input_str.strip().split(",")])
        if len(values) != 1000:
            raise ValueError("Waveform must have exactly 1000 samples.")

        values = values.reshape(1, -1)
        pred_class = model.predict(values)[0]
        class_label = label_encoder.inverse_transform([pred_class])[0]

        print(f"Predicted THD Class: {class_label}")
        return class_label

    except Exception as e:
        print(f"Error: {e}")

# If input_data is provided
if input_data:
    classify_waveform(input_data)
